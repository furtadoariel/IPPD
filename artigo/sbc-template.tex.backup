\documentclass[12pt]{article}

\usepackage{sbc-template}

\usepackage{graphicx,url}
\usepackage{amsmath}
\usepackage[brazil]{babel}   
\usepackage[latin1]{inputenc} 
\usepackage[portuguese, ruled, linesnumbered]{algorithm}

\usepackage{algorithmic}
     
\sloppy

\title{Ánalise de Aplicação de Programação Paralela Através de Estudos de Casos em Implementações em Problemas de Fractais}

\author{Ariel F. Azevedo\inst{1}, Rodrigo Acosta. *\inst{2}, Rodrigo Duarte \inst{1}}


\address{\textit{Laboratory of Ubiquitous and Parallel Systems} (LUPS) - \\ Universidade Federal de Pelotas (UFPel)
\nextinstitute
  Centro de Desenvolvimento Tecnológico - \\Faculdade de Ciência da Computação
  Universidade Federal de Pelotas (UFPel)
  \email{\{afazevedo,rmduarte, rdbacosta\}@inf.ufpel.edu.br
  }
}

\begin{document} 

\maketitle


     
\begin{resumo} 
  Este artigo tem como objetivo apresentar uma solução para o problema de fractal (\textit{fractus} do latim, fração, quebrado) de forma paralela nas linguagens C++11 e OpenMP, 
  bem como uma abordagem sequencial para mostrar a diferença e importância de casos paralelisados.
  
  Este artigo será composto de uma sessão de introdução para apresentar o problema em si, logo depois serão apresentadas ideias e soluçãos, e por fim 
  resultados obtidos ao longo do trabalho. E após isso, conclusões serão debatidas.
  
\end{resumo}


\section{Introdução}
  O uso de ambientes de programação paralela e distribuída tem sido recorrente para a execução de aplicações que exijam
  uma significativa capacidade de processamento de dados .\cite{Dongarra}.
  Dentre os principais motivos para utilização de programação paralela, pode-se citar a importância de reduzir o tempo necessários para as aplicações  
  solucionarem determinados problemas e, também, a necessidade de resolver problemas mais complexos de maior dimensão.\cite{Andrews}.
  Inicialmente, motivada pela resolução de problemas com grande relevância científica e econômica, denominados Grand Challenge Problems(GCPs) .\cite{Stout}
  iniciou-se a utilização de técnicas de processamento paralelo e distribuído.Atualmente, diversas aplicações exigem ou requerem um alto poder  
  de computação,para desta forma,efetuar o processamento de grandes quantidades de informações.O presente artigo busca demonstrar a aplicação de um problema sendo resolvido com
  o uso de programação paralela.Apesar de ser apenas uma avaliação para um problema que, de certa forma, demanda menor quantidade de processamento que os problemas complexos que temos
  atualmente, e que faze uso de programação paralela, como por exemplo, análise de fenômenos climáticos (movimento das placas tectônicas), físicos (órbita dos planetas), 
  químicos (reações  nucleares), dentre outros tantos.
  Este artigo está dividido nas seguintes sessões: Introdução, O Problema, onde será abordado um pouco sobre que é Fractal e suas características, Conceitos, onde será 
  falado sobre os principais conceitos abordados pelo artigo, para melhor entendimento da parte do leitor, Metodologia, onde será descrito a forma como o problema foi 
  abordado e as soluções tentadas, Resultados onde serão apresentados alguns dos resultados obtidos nos testes realizados e por fim, mas não menos importante a Conclusão, 
  onde será então discutido o desfecho do artigo e conclusão do grupo sobre o trabalho e resultados obtidos.

\section{Problema}
  A teoria fractal tem sua origem na descoberta do matemático alemão Karl Weierstrass que
encontrou uma função com a propriedade de ser contínua em todo seu domínio, mas em
nenhum ponto diferenciável. As plotagens dessas funções eram difíceis, pois elas são
recursivas, então o trabalho manual era praticamente impossível. Com o advento do
computador o professor Benoît Mandelbrot foi o primeiro a utilizar a máquina para plotar a
função recursiva estudada por Pierre Fatou, hoje chamada de Conjunto de Mandelbrot ou
simplesmente Fractal de Mandelbrot.

O conjunto de Mandelbrot é definido como o conjunto específico de pontos do plano complexo de Argand-Gauss que obedecem a distância máxima de 2 da origem do plano,
isto é, \textquotedblleft não tendem ao infinito\textquotedblright  para a sequência definida pela recorrência do número complexo  $Z = x+yi$.
 $Z_{0} = 0$

 $Z_{n+1} = Z_{N}^2 + C$

Onde $Z0$ e $Z_{n+1}$ são iterações n e n+1 do número complexo Z, e $C = a + bi$ fornece a posição de um ponto do plano complexo.
Já a parte real e imaginária do complexo Z pode ser desenvolvida até encontrarmos $_{n+1} = x_{n}^2 - y_{n}^2 + a$ e $y_{n+1} = 2x_{n}y_{n} + b$.
Para calcular os pontos de fractal pode-se utilizar o seguinte algoritmo:\\ \\ \\
\begin{algorithm}[H]
   \SetAlgoLined
   int Mandelbrot(Complexo c)
   
   int i = 0, ITR = 255;
   
   float x = 0, y = 0 tmp = 0;
   
   enquanto($x^2+y^2 <= 2^2$ \&\& $i < ITR$)
   
    $tmp = x^2 - y^2 + c.real$;\\
    $y = 2*x*y + c.img$;
    $i$++;
    
    se($i < ITR$) \Retorna{$i$};
    senão \Retorna{0};
   \label{alg1}
   \caption{\textsc{Algoritmo de Mandelbrot}}
 \end{algorithm}

 
 
 A geração da imagem de um fractal dependerá da quantidade de pontos no domínio,
neste caso distância máxima de 2 da origem, e o número máximo de iterações para
determinar se o ponto pertence ou não ao conjunto. Para se obter resoluções aceitáveis, isto
é, imagens onde é possível observar o padrão de similaridade multi-escala, imagens com
resolução maiores que 1200x1200 devem ser utilizadas. Desta forma temos um problema
que exige uma grande quantidade de operações em função da resolução do fractal que se
deseja obter. Tendo isto em vista, utilizamos de programação paralela para tentar reduzir o problema fazendo com que ele seja feito de forma concorrente.
\\
\section{Conceitos}
Nesta sessão será então abordado os pri
\subsection{Programação Paralela}
\subsection{Programação Concorrente}
\subsection{C++11}
\subsection{openmp}

\section{Metodologia}\label{sec:methodology}

\section{Resultados}


\section{Conclusão}


\bibliographystyle{sbc}
\bibliography{sbc-template}

\end{document}
